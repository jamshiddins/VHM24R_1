"""
Celery –∑–∞–¥–∞—á–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
"""
import os
import shutil
import tempfile
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
import logging
from pathlib import Path

from celery import current_task
from celery.exceptions import Retry
from sqlalchemy.orm import Session
from sqlalchemy import text

from .celery_app import celery_app, task_logger
from .database import SessionLocal
from . import crud, schemas
from .services.file_processor import file_processor


@celery_app.task(bind=True, name="app.celery_tasks.process_file_task")
def process_file_task(self, file_path: str, order_id: int, user_id: int) -> Dict[str, Any]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
    """
    task_logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {file_path}, –∑–∞–∫–∞–∑: {order_id}")
    
    db = SessionLocal()
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        current_task.update_state(  # type: ignore
            state="PROCESSING",
            meta={"status": "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞—á–∞—Ç–∞", "progress": 0}
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        order_data = {
            "status": "processing",
            "metadata": {"celery_task_id": self.request.id}
        }
        crud.update_order(db, order_id, order_data)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        import asyncio
        result = asyncio.run(file_processor.process_file(file_path, order_id, user_id))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        current_task.update_state(  # type: ignore
            state="SUCCESS",
            meta={
                "status": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
                "progress": 100,
                "result": result
            }
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        send_telegram_notification.delay(  # type: ignore
            user_id,
            f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n"
            f"–ó–∞–∫–∞–∑: #{order_id}\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {result.get('processed_rows', 0)}\n"
            f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {result.get('total_rows', 0)}"
        )
        
        task_logger.info(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return result
        
    except Exception as e:
        task_logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
        current_task.update_state(  # type: ignore
            state="FAILURE",
            meta={"status": f"–û—à–∏–±–∫–∞: {str(e)}", "progress": 0}
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        order_data = {
            "status": "cancelled",
            "metadata": {"error": str(e)}
        }
        crud.update_order(db, order_id, order_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        send_telegram_notification.delay(  # type: ignore
            user_id,
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞!\n"
            f"–ó–∞–∫–∞–∑: #{order_id}\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± retry –≤ Celery
        if self.request.retries < 3:
            raise self.retry(exc=e, countdown=60, max_retries=3)
        else:
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            raise e
        
    finally:
        db.close()


@celery_app.task(bind=True, name="app.celery_tasks.export_data_task")
def export_data_task(self, export_request: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    """
    task_logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö: {export_request}")
    
    db = SessionLocal()
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        current_task.update_state(  # type: ignore
            state="PROCESSING",
            meta={"status": "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞—Ç", "progress": 0}
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —ç–∫—Å–ø–æ—Ä—Ç (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        from .services.export_service import export_service
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_format = export_request.get("format", "csv")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"export_{timestamp}.{export_format}"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        from .schemas import OrderFilters
        filters = OrderFilters()
        orders, _ = crud.get_orders_with_filters(db, filters, page=1, page_size=1000)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π CSV —Ñ–∞–π–ª
        import csv
        import tempfile
        
        temp_dir = tempfile.mkdtemp()
        file_path = os.path.join(temp_dir, filename)
        
        with open(file_path, 'w', newline='', encoding='utf-8') as csvfile:
            if orders:
                fieldnames = ['order_number', 'machine_code', 'order_price', 'payment_type', 'status']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                
                for order in orders:
                    writer.writerow({
                        'order_number': getattr(order, 'order_number', ''),
                        'machine_code': getattr(order, 'machine_code', ''),
                        'order_price': getattr(order, 'order_price', ''),
                        'payment_type': getattr(order, 'payment_type', ''),
                        'status': getattr(order, 'status', '')
                    })
        
        result = {
            "file_path": file_path,
            "filename": filename,
            "records_count": len(orders),
            "export_format": export_format
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        current_task.update_state(  # type: ignore
            state="SUCCESS",
            meta={"status": "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", "progress": 100, "file_path": result["file_path"]}
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if export_request.get("user_id"):
            send_telegram_notification.delay(  # type: ignore
                export_request["user_id"],
                f"üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤!\n"
                f"–§–æ—Ä–º–∞—Ç: {export_request.get('format', 'CSV')}\n"
                f"–§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é"
            )
        
        task_logger.info("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return result
        
    except Exception as e:
        task_logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        
        current_task.update_state(  # type: ignore
            state="FAILURE",
            meta={"status": f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", "progress": 0}
        )
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± retry –≤ Celery
        if self.request.retries < 3:
            raise self.retry(exc=e, countdown=60, max_retries=3)
        else:
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            raise e
        
    finally:
        db.close()


@celery_app.task(name="app.celery_tasks.send_telegram_notification")
def send_telegram_notification(user_id: int, message: str) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    """
    task_logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    try:
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Telegram Bot API
        task_logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {message}")
        return True
        
    except Exception as e:
        task_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
        return False


@celery_app.task(name="app.celery_tasks.cleanup_temp_files")
def cleanup_temp_files() -> Dict[str, Any]:
    """
    –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    task_logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    cleaned_files = 0
    freed_space = 0
    
    try:
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        temp_dirs = [
            os.path.join(os.getcwd(), "backend", "temp"),
            os.path.join(os.getcwd(), "backend", "uploads"),
            tempfile.gettempdir()
        ]
        
        # –§–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        cutoff_time = datetime.now() - timedelta(hours=24)
        
        for temp_dir in temp_dirs:
            if not os.path.exists(temp_dir):
                continue
                
            for root, dirs, files in os.walk(temp_dir):
                for file in files:
                    file_path = os.path.join(root, file)
                    
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                        file_time = datetime.fromtimestamp(os.path.getctime(file_path))
                        
                        if file_time < cutoff_time:
                            file_size = os.path.getsize(file_path)
                            os.remove(file_path)
                            cleaned_files += 1
                            freed_space += file_size
                            
                    except Exception as e:
                        task_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {str(e)}")
        
        # –û—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for temp_dir in temp_dirs:
            if os.path.exists(temp_dir):
                try:
                    for root, dirs, files in os.walk(temp_dir, topdown=False):
                        for dir_name in dirs:
                            dir_path = os.path.join(root, dir_name)
                            if not os.listdir(dir_path):
                                os.rmdir(dir_path)
                except Exception as e:
                    task_logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É—Å—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {str(e)}")
        
        result = {
            "cleaned_files": cleaned_files,
            "freed_space_mb": round(freed_space / (1024 * 1024), 2),
            "timestamp": datetime.now().isoformat()
        }
        
        task_logger.info(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
        return result
        
    except Exception as e:
        task_logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")
        raise


@celery_app.task(name="app.celery_tasks.generate_analytics_report")
def generate_analytics_report() -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    """
    task_logger.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç")
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        yesterday = datetime.now() - timedelta(days=1)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        from .schemas import OrderFilters
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
        filters = OrderFilters()
        orders, total_orders_count = crud.get_orders_with_filters(db, filters, page=1, page_size=1000)
        users = crud.get_all_users(db)
        
        total_orders = len(orders)
        completed_orders = len([o for o in orders if o.status == "completed"])
        failed_orders = len([o for o in orders if o.status == "cancelled"])
        
        new_users = len([u for u in users if hasattr(u, 'created_at') and getattr(u, 'created_at', None) and getattr(u, 'created_at') >= yesterday])
        active_users = len(users)
        
        report = {
            "date": yesterday.strftime("%Y-%m-%d"),
            "orders": {
                "total": total_orders,
                "completed": completed_orders,
                "failed": failed_orders,
                "success_rate": round((completed_orders / max(total_orders, 1)) * 100, 2)
            },
            "users": {
                "new": new_users,
                "active": active_users
            },
            "files": {
                "processed": completed_orders,
                "total_size_mb": 0  # –ó–∞–≥–ª—É—à–∫–∞
            },
            "timestamp": datetime.now().isoformat()
        }
        
        task_logger.info(f"–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {report}")
        return report
        
    except Exception as e:
        task_logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        raise
        
    finally:
        db.close()


@celery_app.task(name="app.celery_tasks.health_check_task")
def health_check_task() -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    """
    task_logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
    
    health_status = {
        "timestamp": datetime.now().isoformat(),
        "database": False,
        "redis": False,
        "file_system": False,
        "celery_workers": False
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        db = SessionLocal()
        db.execute(text("SELECT 1"))
        health_status["database"] = True
        db.close()
    except Exception as e:
        task_logger.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    try:
        import redis
        redis_url = os.getenv("REDIS_URL", "redis://localhost:6379/0")
        redis_client = redis.from_url(redis_url)
        if redis_client is not None:
            redis_client.ping()
            health_status["redis"] = True
    except Exception as e:
        task_logger.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Redis: {str(e)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    try:
        temp_dir = os.path.join(os.getcwd(), "backend", "temp")
        os.makedirs(temp_dir, exist_ok=True)
        
        test_file = os.path.join(temp_dir, f"health_check_{datetime.now().timestamp()}.tmp")
        with open(test_file, 'w') as f:
            f.write("health check")
        
        if os.path.exists(test_file):
            os.remove(test_file)
            health_status["file_system"] = True
            
    except Exception as e:
        task_logger.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π: {str(e)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Celery workers
    try:
        from .celery_app import celery_app
        stats = celery_app.control.inspect().stats()
        health_status["celery_workers"] = bool(stats)
    except Exception as e:
        task_logger.error(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Celery workers: {str(e)}")
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
    health_status["overall_healthy"] = all([
        health_status["database"],
        health_status["redis"],
        health_status["file_system"]
    ])
    
    task_logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {health_status}")
    return health_status


@celery_app.task(name="app.celery_tasks.database_backup_task")
def database_backup_task() -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    task_logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        backup_dir = os.path.join(os.getcwd(), "backend", "backups")
        os.makedirs(backup_dir, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = os.path.join(backup_dir, f"vhm24r_backup_{timestamp}.db")
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è SQLite)
        db_file = os.path.join(os.getcwd(), "backend", "vhm24r.db")
        if os.path.exists(db_file):
            shutil.copy2(db_file, backup_file)
            
            result = {
                "backup_file": backup_file,
                "backup_size": os.path.getsize(backup_file),
                "timestamp": datetime.now().isoformat()
            }
            
            task_logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {result}")
            return result
        else:
            raise FileNotFoundError("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        task_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}")
        raise


@celery_app.task(name="app.celery_tasks.optimize_database_task")
def optimize_database_task() -> Dict[str, Any]:
    """
    –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    task_logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    db = SessionLocal()
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º VACUUM –¥–ª—è SQLite
        db.execute(text("VACUUM"))
        db.execute(text("ANALYZE"))
        db.commit()
        
        result = {
            "optimization_completed": True,
            "timestamp": datetime.now().isoformat()
        }
        
        task_logger.info("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return result
        
    except Exception as e:
        task_logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        raise
        
    finally:
        db.close()
