"""
API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ v2.0
"""

from fastapi import APIRouter, Depends, HTTPException, Request, Response, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from sqlalchemy.orm import Session
from typing import Optional, Dict, Any, List
from pydantic import BaseModel, Field
import os

from ..database import get_db
from ..services.auth_v2 import AuthenticationService
from ..services.auth_v2.auth_models import (
    AuthResult, TokenResponse, StatusResponse,
    TelegramAuthData, AdminAuthData, SessionAuthData, RefreshTokenData,
    UserSessionInfo
)
from ..services.auth_v2.exceptions import (
    AuthenticationError, RateLimitError, TokenError,
    InvalidCredentialsError, UserNotApprovedError
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
router = APIRouter(prefix="/api/v2/auth", tags=["Authentication v2.0"])
security = HTTPBearer()
auth_service = AuthenticationService()

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class TelegramAuthRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram"""
    id: int = Field(..., description="Telegram user ID")
    first_name: str = Field(..., description="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    auth_date: int = Field(..., description="–í—Ä–µ–º—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    hash: str = Field(..., description="–•–µ—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    last_name: Optional[str] = Field(None, description="–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    username: Optional[str] = Field(None, description="Username –≤ Telegram")
    photo_url: Optional[str] = Field(None, description="URL —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è")

class AdminAuthRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    username: str = Field(..., description="–õ–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    password: str = Field(..., description="–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

class SessionAuthRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É —Å–µ—Å—Å–∏–∏"""
    session_token: str = Field(..., description="–¢–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏")
    password: Optional[str] = Field(None, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å")

class RefreshTokenRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
    refresh_token: str = Field(..., description="Refresh —Ç–æ–∫–µ–Ω")

class LogoutRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    revoke_all_sessions: bool = Field(False, description="–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏")

class AuthResponse(BaseModel):
    """–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    success: bool = True
    message: str = "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
    user: Dict[str, Any]
    tokens: Dict[str, Any]
    session_id: str
    expires_at: str

class ErrorResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π"""
    success: bool = False
    error: str
    error_code: str
    details: Optional[Dict[str, Any]] = None

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_client_info(request: Request) -> tuple[Optional[str], Optional[str]]:
    """–ü–æ–ª—É—á–∞–µ—Ç IP –∞–¥—Ä–µ—Å –∏ User-Agent –∫–ª–∏–µ–Ω—Ç–∞"""
    ip_address = request.client.host if request.client else None
    user_agent = request.headers.get("user-agent")
    return ip_address, user_agent

async def get_current_user(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: Session = Depends(get_db)
) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞"""
    if not credentials:
        return None
    
    return await auth_service.validate_access_token(credentials.credentials, db)

# API Endpoints

@router.post("/telegram", response_model=AuthResponse, responses={
    400: {"model": ErrorResponse, "description": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"},
    401: {"model": ErrorResponse, "description": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram"},
    403: {"model": ErrorResponse, "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–¥–æ–±—Ä–µ–Ω"},
    429: {"model": ErrorResponse, "description": "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"},
    500: {"model": ErrorResponse, "description": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}
})
async def authenticate_telegram(
    auth_data: TelegramAuthRequest,
    request: Request,
    db: Session = Depends(get_db)
):
    """
    üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
    
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        ip_address, user_agent = get_client_info(request)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Pydantic –º–æ–¥–µ–ª—å –≤ dataclass
        telegram_data = TelegramAuthData(
            id=auth_data.id,
            first_name=auth_data.first_name,
            auth_date=auth_data.auth_date,
            hash=auth_data.hash,
            last_name=auth_data.last_name,
            username=auth_data.username,
            photo_url=auth_data.photo_url
        )
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º
        result = await auth_service.authenticate_telegram(
            telegram_data, db, ip_address, user_agent
        )
        
        if not result.success:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏
            error_code = result.error_code or "UNKNOWN_ERROR"
            status_code = {
                "INVALID_TELEGRAM_DATA": status.HTTP_401_UNAUTHORIZED,
                "USER_NOT_APPROVED": status.HTTP_403_FORBIDDEN,
                "RATE_LIMIT_EXCEEDED": status.HTTP_429_TOO_MANY_REQUESTS,
                "SERVICE_UNAVAILABLE": status.HTTP_503_SERVICE_UNAVAILABLE,
                "USER_CREATION_ERROR": status.HTTP_500_INTERNAL_SERVER_ERROR,
                "INTERNAL_ERROR": status.HTTP_500_INTERNAL_SERVER_ERROR,
            }.get(error_code, status.HTTP_400_BAD_REQUEST)
            
            raise HTTPException(
                status_code=status_code,
                detail={
                    "success": False,
                    "error": result.error_message or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
                    "error_code": error_code
                }
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {
            "success": True,
            "message": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —É—Å–ø–µ—à–Ω–∞",
            "user": result.user,
            "tokens": {
                "access_token": result.access_token,
                "refresh_token": result.refresh_token,
                "token_type": "bearer"
            },
            "session_id": result.session_id,
            "expires_at": result.expires_at.isoformat() if result.expires_at else None
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={
                "success": False,
                "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "error_code": "INTERNAL_ERROR"
            }
        )

@router.post("/admin", response_model=AuthResponse)
async def authenticate_admin(
    auth_data: AdminAuthRequest,
    request: Request,
    db: Session = Depends(get_db)
):
    """
    üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é.
    """
    try:
        ip_address, user_agent = get_client_info(request)
        
        admin_data = AdminAuthData(
            username=auth_data.username,
            password=auth_data.password,
            ip_address=ip_address,
            user_agent=user_agent
        )
        
        result = await auth_service.authenticate_admin(
            admin_data, db, ip_address, user_agent
        )
        
        if not result.success:
            error_code = result.error_code or "UNKNOWN_ERROR"
            status_code = {
                "INVALID_CREDENTIALS": status.HTTP_401_UNAUTHORIZED,
                "RATE_LIMIT_EXCEEDED": status.HTTP_429_TOO_MANY_REQUESTS,
                "INTERNAL_ERROR": status.HTTP_500_INTERNAL_SERVER_ERROR,
            }.get(error_code, status.HTTP_400_BAD_REQUEST)
            
            raise HTTPException(
                status_code=status_code,
                detail={
                    "success": False,
                    "error": result.error_message or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
                    "error_code": error_code
                }
            )
        
        return {
            "success": True,
            "message": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
            "user": result.user,
            "tokens": {
                "access_token": result.access_token,
                "refresh_token": result.refresh_token,
                "token_type": "bearer"
            },
            "session_id": result.session_id,
            "expires_at": result.expires_at.isoformat() if result.expires_at else None
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={
                "success": False,
                "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "error_code": "INTERNAL_ERROR"
            }
        )

@router.post("/session", response_model=AuthResponse)
async def authenticate_session(
    auth_data: SessionAuthRequest,
    request: Request,
    db: Session = Depends(get_db)
):
    """
    üé´ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É —Å–µ—Å—Å–∏–∏
    
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–æ–∫–µ–Ω—É —Å–µ—Å—Å–∏–∏.
    """
    try:
        ip_address, user_agent = get_client_info(request)
        
        session_data = SessionAuthData(
            session_token=auth_data.session_token,
            password=auth_data.password,
            ip_address=ip_address,
            user_agent=user_agent
        )
        
        result = await auth_service.authenticate_session(
            session_data, db, ip_address, user_agent
        )
        
        if not result.success:
            error_code = result.error_code or "UNKNOWN_ERROR"
            status_code = {
                "INVALID_SESSION": status.HTTP_401_UNAUTHORIZED,
                "SESSION_EXPIRED": status.HTTP_401_UNAUTHORIZED,
                "USER_NOT_FOUND": status.HTTP_404_NOT_FOUND,
                "USER_NOT_APPROVED": status.HTTP_403_FORBIDDEN,
                "RATE_LIMIT_EXCEEDED": status.HTTP_429_TOO_MANY_REQUESTS,
            }.get(error_code, status.HTTP_400_BAD_REQUEST)
            
            raise HTTPException(
                status_code=status_code,
                detail={
                    "success": False,
                    "error": result.error_message or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
                    "error_code": error_code
                }
            )
        
        return {
            "success": True,
            "message": "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å–µ—Å—Å–∏–∏ —É—Å–ø–µ—à–Ω–∞",
            "user": result.user,
            "tokens": {
                "access_token": result.access_token,
                "refresh_token": result.refresh_token,
                "token_type": "bearer"
            },
            "session_id": result.session_id,
            "expires_at": result.expires_at.isoformat() if result.expires_at else None
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={
                "success": False,
                "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "error_code": "INTERNAL_ERROR"
            }
        )

@router.post("/refresh")
async def refresh_token(
    refresh_data: RefreshTokenRequest,
    db: Session = Depends(get_db)
):
    """
    üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access —Ç–æ–∫–µ–Ω–∞
    
    –û–±–Ω–æ–≤–ª—è–µ—Ç access —Ç–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É—è refresh —Ç–æ–∫–µ–Ω.
    """
    try:
        token_data = RefreshTokenData(
            refresh_token=refresh_data.refresh_token
        )
        
        result = await auth_service.refresh_token(token_data, db)
        
        return {
            "success": True,
            "message": "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
            "access_token": result.access_token,
            "expires_at": result.expires_at.isoformat(),
            "token_type": "bearer"
        }
        
    except (TokenError, InvalidCredentialsError, UserNotApprovedError) as e:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail={
                "success": False,
                "error": str(e),
                "error_code": "INVALID_REFRESH_TOKEN"
            }
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={
                "success": False,
                "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "error_code": "INTERNAL_ERROR"
            }
        )

@router.post("/logout")
async def logout(
    logout_data: LogoutRequest,
    credentials: HTTPAuthorizationCredentials = Depends(security),
    db: Session = Depends(get_db)
):
    """
    üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º session_id –∏–∑ —Ç–æ–∫–µ–Ω–∞
        user_data = await auth_service.validate_access_token(credentials.credentials, db)
        if not user_data:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail={
                    "success": False,
                    "error": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω",
                    "error_code": "INVALID_TOKEN"
                }
            )
        
        # –ü–æ–ª—É—á–∞–µ–º payload —Ç–æ–∫–µ–Ω–∞ –¥–ª—è session_id
        payload = auth_service.token_manager.validate_token(credentials.credentials)
        
        result = await auth_service.logout(
            payload.session_id, db, logout_data.revoke_all_sessions
        )
        
        return {
            "success": result.success,
            "message": result.message
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={
                "success": False,
                "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                "error_code": "INTERNAL_ERROR"
            }
        )

@router.get("/me")
async def get_current_user_info(
    current_user: Dict[str, Any] = Depends(get_current_user)
):
    """
    üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    if not current_user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail={
                "success": False,
                "error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
                "error_code": "AUTHENTICATION_REQUIRED"
            }
        )
    
    return {
        "success": True,
        "user": current_user
    }

@router.get("/sessions")
async def get_user_sessions(
    current_user: Dict[str, Any] = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    üì± –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not current_user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail={
                "success": False,
                "error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
                "error_code": "AUTHENTICATION_REQUIRED"
            }
        )
    
    try:
        user_id = current_user.get("id")
        if not user_id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail={
                    "success": False,
                    "error": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "error_code": "USER_ID_NOT_FOUND"
                }
            )
        
        sessions = await auth_service.get_user_sessions(int(user_id), db)
        
        return {
            "success": True,
            "sessions": [
                {
                    "session_id": session.session_id,
                    "session_type": session.session_type.value,
                    "created_at": session.created_at.isoformat(),
                    "last_activity": session.last_activity.isoformat(),
                    "is_current": session.is_current,
                    "user_agent": session.user_agent,
                    "ip_address": session.ip_address
                }
                for session in sessions
            ]
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={
                "success": False,
                "error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π",
                "error_code": "INTERNAL_ERROR"
            }
        )

@router.get("/health")
async def health_check():
    """
    ‚ù§Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    """
    return {
        "success": True,
        "message": "–°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ v2.0 —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "version": "2.0",
        "features": [
            "telegram_auth",
            "admin_auth", 
            "session_auth",
            "token_refresh",
            "rate_limiting",
            "security_logging"
        ]
    }
