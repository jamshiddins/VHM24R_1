import asyncio
import os
import secrets
import uuid
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from sqlalchemy.orm import Session
from .database import SessionLocal
from . import crud
from .telegram_auth import TelegramAuth
from .services.simple_dynamic_auth import SimpleDynamicAuth

class EnhancedTelegramBot:
    def __init__(self, token: str):
        self.token = token
        self.app = Application.builder().token(token).build()
        self.telegram_auth = TelegramAuth()
        self.simple_auth = SimpleDynamicAuth()
        
        # –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –ê–î–ú–ò–ù - –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.ADMIN_USERNAME = "Jamshiddin"
        self.ADMIN_TELEGRAM_ID = int(os.getenv('ADMIN_TELEGRAM_ID', 42283329))
        self.ADMIN_CHAT_ID = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        
        # –û—Ç–∫—Ä—ã—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ª—é–±–æ–π –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
        self.OPEN_REGISTRATION = True
        
        self.setup_handlers()
    
    def _safe_get_user_id(self, user_obj, fallback_id: int = 1) -> int:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ SQLAlchemy –æ–±—ä–µ–∫—Ç–∞"""
        try:
            if hasattr(user_obj, 'id'):
                user_id_value = user_obj.id
                # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π int –∏–ª–∏ str
                if isinstance(user_id_value, (int, str)):
                    return int(user_id_value)
                # –ï—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ __int__
                elif hasattr(user_id_value, '__int__'):
                    return int(user_id_value)
                # –ï—Å–ª–∏ —ç—Ç–æ SQLAlchemy –æ–±—ä–µ–∫—Ç —Å scalar()
                elif hasattr(user_id_value, 'scalar'):
                    return int(user_id_value.scalar())
                else:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç –Ω–∞–ø—Ä—è–º—É—é
                    return int(getattr(user_obj, 'id'))
            else:
                return fallback_id
        except (ValueError, AttributeError, TypeError) as e:
            print(f"‚ö†Ô∏è Warning: Could not extract user ID, using fallback: {e}")
            return fallback_id
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CallbackQueryHandler(self.handle_callback))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –æ—Ç–∫—Ä—ã—Ç–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π"""
        user = update.effective_user
        if not user:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        is_admin = user.username == self.ADMIN_USERNAME
        
        if is_admin and not self.ADMIN_CHAT_ID:
            self.ADMIN_CHAT_ID = user.id
            await self.initialize_admin(user)
        
        db = SessionLocal()
        try:
            db_user = crud.get_user_by_telegram_id(db, user.id)
            
            if not db_user:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if is_admin:
                    await self.create_admin_user(user, db)
                    await self.show_admin_menu(update)
                else:
                    # –õ—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
                    await self.show_registration_menu(update, user)
            else:
                # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if str(db_user.role) == 'admin':
                    await self.show_admin_menu(update)
                elif str(db_user.status) == 'approved':
                    await self.show_user_menu(update, db_user)
                elif str(db_user.status) == 'pending':
                    await self.show_pending_status(update, db_user)
                elif str(db_user.status) == 'blocked':
                    await self.show_blocked_status(update)
                    
        finally:
            db.close()
    
    async def initialize_admin(self, user):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
        welcome_admin = f"""
üëë <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>

üéâ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã VHM24R
üîß –£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
üìä –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É

<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π</i>
"""
        await self.send_message_with_parse(user.id, welcome_admin)
    
    async def create_admin_user(self, user, db):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∞ –≤ –ë–î"""
        admin_data = {
            'telegram_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'status': 'approved',
            'role': 'admin',
            'approved_at': datetime.utcnow(),
            'approved_by': None  # –°–∞–º–æ–æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        }
        crud.create_user(db, admin_data)
    
    async def create_regular_user(self, user, db):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ)"""
        user_data = {
            'telegram_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'status': 'approved',  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä—è–µ–º –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
            'role': 'user',
            'approved_at': datetime.utcnow(),
            'approved_by': None  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
        }
        crud.create_user(db, user_data)
    
    async def send_dynamic_credentials(self, user, db):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–µ—Å—Å–∏—é
        session_link = await self.simple_auth.create_access_link(user.id, db)
        
        session_data = {
            'url': session_link,
            'password': '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑ –ø–∞—Ä–æ–ª–µ–π
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
üîê <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ VHM24R</b>

‚úÖ –í–∞—à –¥–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
üåê <b>–°—Å—ã–ª–∫–∞:</b> 
<code>{session_data['url']}</code>

üîë <b>–ü–∞—Ä–æ–ª—å:</b> <code>{session_data['password']}</code>

‚è± <b>–î–µ–π—Å—Ç–≤—É–µ—Ç:</b> 30 –º–∏–Ω—É—Ç
üö® <b>–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ —Å—Å—ã–ª–∫–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π</b>

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É

<i>üîí VHM24R - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏</i>
"""
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üÜï –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞", callback_data="new_link"),
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help_dynamic")
            ]
        ])
        
        await self.app.bot.send_message(
            chat_id=user.id,
            text=message,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –≤—Ö–æ–¥–µ
        await self.notify_admin_access(user.username or "unknown", "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è")
    
    async def handle_new_link_request(self, query):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏"""
        user = query.from_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db = SessionLocal()
        try:
            db_user = crud.get_user_by_telegram_id(db, user.id)
            if not db_user or str(db_user.status) != 'approved':
                await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
                return
            
            await self.send_dynamic_credentials(user, db)
            await query.answer("‚úÖ –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", show_alert=True)
        finally:
            db.close()
    
    async def show_help_dynamic(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å –ø–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å—Å—ã–ª–∫–∞–º"""
        help_text = """
‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å—Å—ã–ª–∫–∞–º</b>

üîó <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω–∞
‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ 30 –º–∏–Ω—É—Ç
‚Ä¢ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
‚Ä¢ –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ —Å—Å—ã–ª–∫–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è

üîÑ <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üÜï –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞"
‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∑–∞–Ω–æ–≤–æ

üîê <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ö–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞

üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @Jamshiddin
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="new_link")]
        ])
        
        await query.edit_message_text(
            help_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
    
    async def show_admin_menu(self, update_or_query):
        """–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞
        db = SessionLocal()
        try:
            pending_users = crud.get_pending_users(db)
            pending_count = len(pending_users)
            total_users = crud.get_total_users_count(db)
            active_sessions = crud.get_active_sessions_count(db)
        finally:
            db.close()
        
        admin_text = f"""
üëë <b>–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>
‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: <b>{pending_count}</b>
üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: <b>{active_sessions}</b>

<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</i>
"""
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(f"‚è≥ –ó–∞—è–≤–∫–∏ ({pending_count})", callback_data="admin_pending"),
                InlineKeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="admin_stats"),
                InlineKeyboardButton("üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏", callback_data="admin_sessions")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞", callback_data="admin_settings"),
                InlineKeyboardButton("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="admin_monitoring")
            ],
            [
                InlineKeyboardButton("üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫", callback_data="admin_generate_links"),
                InlineKeyboardButton("üöÄ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É", callback_data="admin_login")
            ],
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_menu")
            ]
        ])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
        if hasattr(update_or_query, 'edit_message_text'):
            # –≠—Ç–æ CallbackQuery
            await update_or_query.edit_message_text(
                admin_text, 
                parse_mode='HTML',
                reply_markup=keyboard
            )
        elif hasattr(update_or_query, 'message') and update_or_query.message:
            # –≠—Ç–æ Update —Å message
            await update_or_query.message.reply_text(
                admin_text, 
                parse_mode='HTML',
                reply_markup=keyboard
            )
        else:
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            chat_id = getattr(update_or_query, 'chat_id', None) or getattr(update_or_query.from_user, 'id', None)
            if chat_id:
                await self.app.bot.send_message(
                    chat_id=chat_id,
                    text=admin_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
    
    async def show_user_menu(self, update_or_query, user_data):
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id_int = self._safe_get_user_id(user_data, 1)
        unique_link = await self.generate_unique_user_link(user_id_int)
        
        user_text = f"""
‚úÖ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data.first_name}!</b>

üéâ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
üîó –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≥–æ—Ç–æ–≤–∞
‚ö†Ô∏è <i>–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</i>

üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
"""
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="get_login_link")
            ],
            [
                InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data="user_status"),
                InlineKeyboardButton("üìà –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="user_activity")
            ],
            [
                InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="user_help"),
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="user_refresh_link")
            ],
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", callback_data="user_menu")
            ]
        ])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
        if hasattr(update_or_query, 'edit_message_text'):
            # –≠—Ç–æ CallbackQuery
            await update_or_query.edit_message_text(
                user_text, 
                parse_mode='HTML',
                reply_markup=keyboard
            )
        elif hasattr(update_or_query, 'message') and update_or_query.message:
            # –≠—Ç–æ Update —Å message
            await update_or_query.message.reply_text(
                user_text, 
                parse_mode='HTML',
                reply_markup=keyboard
            )
        else:
            # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            chat_id = getattr(update_or_query, 'chat_id', None) or getattr(update_or_query.from_user, 'id', None)
            if chat_id:
                await self.app.bot.send_message(
                    chat_id=chat_id,
                    text=user_text,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
    
    async def show_registration_menu(self, update: Update, user):
        """–ú–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        
        registration_text = f"""
üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!</b>

üîê <b>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ VHM24R</b>

üìù –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
1Ô∏è‚É£ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
2Ô∏è‚É£ –î–æ–∂–¥–∞—Ç—å—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞

<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏:</i>
"""
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="register_request")
            ],
            [
                InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–∏—Å—Ç–µ–º–µ", callback_data="system_info")
            ]
        ])
        
        if update.message:
            await update.message.reply_text(
                registration_text, 
                parse_mode='HTML',
                reply_markup=keyboard
            )
    
    async def show_pending_status(self, update: Update, user_data):
        """–°—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
        
        pending_text = f"""
‚è≥ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏</b>

üë§ {user_data.first_name}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
üìÖ –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {user_data.created_at.strftime('%d.%m.%Y %H:%M')}

üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
üí¨ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è

<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...</i>
"""
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status")
            ],
            [
                InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin")
            ]
        ])
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                pending_text, 
                parse_mode='HTML',
                reply_markup=keyboard
            )
        else:
            if update.message:
                await update.message.reply_text(
                    pending_text, 
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
    
    async def show_blocked_status(self, update):
        """–°—Ç–∞—Ç—É—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        blocked_text = """
‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

üìû –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @Jamshiddin
"""
        
        if update.callback_query:
            await update.callback_query.edit_message_text(blocked_text, parse_mode='HTML')
        else:
            await update.message.reply_text(blocked_text, parse_mode='HTML')
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        if not query:
            return
            
        await query.answer()
        
        data = query.data
        if not data:
            return
            
        user = query.from_user
        if not user:
            return
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        if data.startswith('admin_'):
            if user.username != self.ADMIN_USERNAME:
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return
            
            await self.handle_admin_callback(query, data)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        elif data.startswith('user_'):
            await self.handle_user_callback(query, data)
        
        # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        elif data == 'register_request':
            await self.process_registration_request(query)
        
        elif data == 'new_link':
            await self.handle_new_link_request(query)
        
        elif data == 'help_dynamic':
            await self.show_help_dynamic(query)
        
        elif data == 'get_login_link':
            await self.send_login_link(query)
        
        elif data.startswith('approve_'):
            await self.process_approval(query, data)
        
        elif data.startswith('reject_'):
            await self.process_rejection(query, data)
        
        elif data.startswith('postpone_'):
            await self.process_postpone(query, data)
    
    async def handle_admin_callback(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback"""
        
        if data == 'admin_menu':
            await self.show_admin_menu(query)
        
        elif data == 'admin_pending':
            await self.show_pending_users(query)
        
        elif data == 'admin_login':
            await self.admin_login_to_system(query)
        
        elif data == 'admin_users':
            await self.show_all_users(query)
        
        elif data == 'admin_stats':
            await self.show_system_stats(query)
        
        elif data == 'admin_sessions':
            await self.show_active_sessions(query)
        
        elif data == 'admin_settings':
            await self.show_admin_settings(query)
        
        elif data == 'admin_monitoring':
            await self.show_monitoring(query)
        
        elif data == 'admin_generate_links':
            await self.show_generate_links(query)
    
    async def show_pending_users(self, query):
        """–ü–æ–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        
        db = SessionLocal()
        try:
            pending_users = crud.get_pending_users(db)
            
            if not pending_users:
                await query.edit_message_text(
                    "‚úÖ <b>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–∏</b>\n\n<i>–í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã</i>",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu")]
                    ])
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await query.edit_message_text(
                f"‚è≥ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–∏: {len(pending_users)}</b>",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu")]
                ])
            )
            
            for user in pending_users:
                await self.show_user_approval_card(query.message.chat_id, user)
                
        finally:
            db.close()
    
    async def show_user_approval_card(self, chat_id, user):
        """–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è"""
        
        user_info = f"""
üë§ <b>–ó–∞—è–≤–∫–∞ #{user.id}</b>

üìù <b>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
üë§ –ò–º—è: <b>{user.first_name} {user.last_name or ''}</b>
üîó Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üÜî Telegram ID: <code>{user.telegram_id}</code>
üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: <b>{user.created_at.strftime('%d.%m.%Y %H:%M')}</b>

‚ö° <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –û–î–û–ë–†–ò–¢–¨", callback_data=f"approve_{user.id}"),
                InlineKeyboardButton("‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨", callback_data=f"reject_{user.id}")
            ],
            [
                InlineKeyboardButton("‚è≥ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"postpone_{user.id}")
            ]
        ])
        
        await self.app.bot.send_message(
            chat_id=chat_id,
            text=user_info,
            parse_mode='HTML',
            reply_markup=keyboard
        )
    
    async def process_approval(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = int(data.split('_')[1])
            
            db = SessionLocal()
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º
                user = crud.get_user_by_id(db, user_id)
                if not user:
                    await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                
                # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∞–¥–º–∏–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
                admin_user = crud.get_user_by_telegram_id(db, self.ADMIN_TELEGRAM_ID)
                if not admin_user:
                    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    admin_data = {
                        'telegram_id': self.ADMIN_TELEGRAM_ID,
                        'username': self.ADMIN_USERNAME,
                        'first_name': 'Admin',
                        'last_name': 'VHM24R',
                        'status': 'approved',
                        'role': 'admin',
                        'approved_at': datetime.utcnow(),
                        'approved_by': None
                    }
                    admin_user = crud.create_user(db, admin_data)
                    db.commit()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–º–∏–Ω–∞
                
                # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
                if admin_user and hasattr(admin_user, 'id'):
                    admin_id = int(getattr(admin_user, 'id'))
                else:
                    # Fallback - —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ —Å ID 1
                    print("‚ö†Ô∏è Warning: Admin user not found, using fallback admin_id=1")
                    admin_id = 1
                
                # –û–¥–æ–±—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                approved_user = crud.approve_user(db, user_id, admin_id)
                
                if approved_user:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ SQLAlchemy –æ–±—ä–µ–∫—Ç–∞
                    user_telegram_id = int(getattr(user, 'telegram_id'))
                    user_username = str(getattr(user, 'username', 'unknown'))
                    user_id_value = int(getattr(user, 'id'))
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
                    unique_link = await self.generate_unique_user_link(user_id_value)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                    await query.edit_message_text(
                        f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω!</b>\n\n"
                        f"üë§ @{user_username}\n"
                        f"üîó –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                        f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                        parse_mode='HTML'
                    )
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    approval_message = f"""
üéâ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –û–î–û–ë–†–ï–ù–ê!</b>

‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–∏–ª –≤–∞—à –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ VHM24R
üîó –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≥–æ—Ç–æ–≤–∞
‚ö†Ô∏è <b>–ù–ï –ü–ï–†–ï–î–ê–í–ê–ô–¢–ï —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</b>

üìä –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ó–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:</i>
"""
                    
                    keyboard = InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_login_link")
                        ]
                    ])
                    
                    await self.app.bot.send_message(
                        chat_id=int(user_telegram_id),
                        text=approval_message,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
                    
                else:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                    
            finally:
                db.close()
                
        except Exception as e:
            print(f"‚ùå Error in process_approval: {e}")
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def process_rejection(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = int(data.split('_')[1])
        
        db = SessionLocal()
        try:
            user = crud.get_user_by_id(db, user_id)
            if user:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                crud.block_user(db, user_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                await query.edit_message_text(
                    f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
                    f"üë§ @{user.username}\n"
                    f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                    parse_mode='HTML'
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                rejection_message = f"""
‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.

üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @{self.ADMIN_USERNAME}

<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!</i>
"""
                
                await self.app.bot.send_message(
                    chat_id=getattr(user, 'telegram_id'),
                    text=rejection_message,
                    parse_mode='HTML'
                )
                
        finally:
            db.close()
    
    async def process_postpone(self, query, data):
        """–û—Ç–ª–æ–∂–∏—Ç—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
        user_id = int(data.split('_')[1])
        
        db = SessionLocal()
        try:
            user = crud.get_user_by_id(db, user_id)
            if user:
                await query.edit_message_text(
                    f"‚è≥ <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞</b>\n\n"
                    f"üë§ @{user.username}\n"
                    f"üìù –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –ø–æ–∑–∂–µ",
                    parse_mode='HTML'
                )
        finally:
            db.close()
    
    async def generate_unique_user_link(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Railway URL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        frontend_url = "https://vhm24r1-production.up.railway.app"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ SimpleDynamicAuth
        db = SessionLocal()
        try:
            unique_link = await self.simple_auth.create_access_link(user_id, db)
            return unique_link
        finally:
            db.close()
    
    async def send_login_link(self, query):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user = query.from_user
        
        db = SessionLocal()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = crud.get_user_by_telegram_id(db, user.id)
            if not db_user or str(db_user.status) != 'approved':
                await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            user_id_int = self._safe_get_user_id(db_user, user.id)
            login_link = await self.generate_unique_user_link(user_id_int)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
            link_message = f"""
üöÄ <b>–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É</b>

üîó –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:
<code>{login_link}</code>

‚è± <b>–î–µ–π—Å—Ç–≤—É–µ—Ç:</b> 2 —á–∞—Å–∞
üîí <b>–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</b>

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–∏–º
‚Ä¢ –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ —Å—Å—ã–ª–∫–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π
‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É

<i>VHM24R - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏</i>
"""
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üÜï –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞", callback_data="get_login_link")
                ],
                [
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")
                ]
            ])
            
            await query.edit_message_text(
                link_message,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            await self.notify_admin_access(user.username or "unknown", "–ó–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞")
            
        finally:
            db.close()

    async def handle_user_callback(self, query, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö callback"""
        user = query.from_user
        
        db = SessionLocal()
        try:
            db_user = crud.get_user_by_telegram_id(db, user.id)
            
            if data == 'user_menu':
                await self.show_user_menu(query, db_user)
            
            elif data == 'user_status':
                await self.show_user_status(query, db_user)
            
            elif data == 'user_refresh_link':
                await self.refresh_user_link(query, db_user)
                
        finally:
            db.close()
    
    async def show_user_status(self, query, user_data):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        status_text = f"""
üìä <b>–í–∞—à —Å—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–µ</b>

üë§ <b>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –ò–º—è: {user_data.first_name} {user_data.last_name or ''}
‚Ä¢ Username: @{user_data.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ ID: <code>{user_data.telegram_id}</code>

‚úÖ <b>–î–æ—Å—Ç—É–ø:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: <b>–û–¥–æ–±—Ä–µ–Ω</b> ‚úÖ
‚Ä¢ –†–æ–ª—å: <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>
‚Ä¢ –î–∞—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {user_data.approved_at.strftime('%d.%m.%Y') if user_data.approved_at else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üîó <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: –ê–∫—Ç–∏–≤–Ω–∞
        ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {user_data.created_at.strftime('%d.%m.%Y %H:%M') if user_data.created_at else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
"""
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="user_refresh_link")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")
            ]
        ])
        
        await query.edit_message_text(
            status_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
    
    async def refresh_user_link(self, query, user_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        user_id_int = self._safe_get_user_id(user_data, query.from_user.id)
        new_link = await self.generate_unique_user_link(user_id_int)
        
        refresh_text = f"""
üîÑ <b>–°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>

‚úÖ –í–∞—à–∞ –Ω–æ–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞
üîí –°—Ç–∞—Ä–∞—è —Å—Å—ã–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç
‚ö†Ô∏è <b>–ù–ï –ü–ï–†–ï–î–ê–í–ê–ô–¢–ï —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–∏–º!</b>

<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞:</i>
"""
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data="user_refresh_link")
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="user_menu")
            ]
        ])
        
        await query.edit_message_text(
            refresh_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
    
    async def process_registration_request(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
        user = query.from_user
        
        db = SessionLocal()
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = {
                'telegram_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'status': 'pending'
            }
            
            new_user = crud.create_user(db, user_data)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await query.edit_message_text(
                f"""
‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>

üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{new_user.id} –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

<i>–í—Ä–µ–º—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è: –æ–±—ã—á–Ω–æ –¥–æ 24 —á–∞—Å–æ–≤</i>
""",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status")]
                ])
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            await self.notify_admin_new_request(user_data, new_user.id)
            
        finally:
            db.close()
    
    async def notify_admin_new_request(self, user_data, request_id):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        
        admin_notification = f"""
üîî <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{request_id}</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>
‚Ä¢ –ò–º—è: {user_data['first_name']} {user_data.get('last_name', '')}
‚Ä¢ Username: @{user_data.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ ID: <code>{user_data['telegram_id']}</code>
‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

‚ö° <b>–¢—Ä–µ–±—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è!</b>
"""
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –û–î–û–ë–†–ò–¢–¨", callback_data=f"approve_{request_id}"),
                InlineKeyboardButton("‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨", callback_data=f"reject_{request_id}")
            ],
            [
                InlineKeyboardButton("‚è≥ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"postpone_{request_id}"),
                InlineKeyboardButton("üë• –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_pending")
            ]
        ])
        
        if self.ADMIN_CHAT_ID:
            await self.app.bot.send_message(
                chat_id=self.ADMIN_CHAT_ID,
                text=admin_notification,
                parse_mode='HTML',
                reply_markup=keyboard
            )
    
    async def admin_login_to_system(self, query):
        """–í—Ö–æ–¥ –∞–¥–º–∏–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É—è TELEGRAM_ID, –∞ –Ω–µ CHAT_ID
        admin_link = await self.generate_unique_user_link(self.ADMIN_TELEGRAM_ID)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_login = "admin"
        admin_password = "admin123"
        
        admin_login_text = f"""
üöÄ <b>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üëë –í–∞—à–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞
üîí –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã

üìã <b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:</b>
üîë <b>–õ–æ–≥–∏–Ω:</b> <code>{admin_login}</code>
üîê <b>–ü–∞—Ä–æ–ª—å:</b> <code>{admin_password}</code>

üåê <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞—à–±–æ—Ä–¥:</b>
{admin_link}

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤—Ö–æ–¥–æ–≤
‚Ä¢ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ

<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞:</i>
"""
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üÜï –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞", callback_data="admin_new_link")
            ],
            [
                InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="copy_admin_credentials"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu")
            ]
        ])
        
        await query.edit_message_text(
            admin_login_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –º–µ–Ω—é)"""
        await self.start_command(update, context)
    
    async def notify_admin_access(self, username: str, action: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞ –æ –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if self.ADMIN_CHAT_ID:
            notification = f"""
üîî <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username}
üéØ <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action}
üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

<i>VHM24R Security Monitor</i>
"""
            
            await self.app.bot.send_message(
                chat_id=self.ADMIN_CHAT_ID,
                text=notification,
                parse_mode='HTML'
            )

    async def show_all_users(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        db = SessionLocal()
        try:
            all_users = crud.get_all_users(db)
            
            users_text = f"üë• <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(all_users)})</b>\n\n"
            
            for user in all_users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                status_emoji = "‚úÖ" if str(user.status) == 'approved' else "‚è≥" if str(user.status) == 'pending' else "‚ùå"
                role_emoji = "üëë" if str(user.role) == 'admin' else "üë§"
                
                users_text += f"{status_emoji} {role_emoji} @{user.username or 'no_username'}\n"
                users_text += f"   üìÖ {user.created_at.strftime('%d.%m.%Y')}\n\n"
            
            if len(all_users) > 10:
                users_text += f"... –∏ –µ—â–µ {len(all_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu")]
            ])
            
            await query.edit_message_text(users_text, parse_mode='HTML', reply_markup=keyboard)
        finally:
            db.close()
    
    async def show_system_stats(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        db = SessionLocal()
        try:
            all_users = crud.get_all_users(db)
            stats = {
                'total_users': crud.get_total_users_count(db),
                'pending_users': len(crud.get_pending_users(db)),
                'active_sessions': crud.get_active_sessions_count(db),
                'approved_users': len([u for u in all_users if str(u.status) == 'approved']),
                'blocked_users': len([u for u in all_users if str(u.status) == 'blocked'])
            }
            
            stats_text = f"""
üìä <b>–°–ò–°–¢–ï–ú–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: <b>{stats['total_users']}</b>
‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: <b>{stats['approved_users']}</b>
‚Ä¢ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: <b>{stats['pending_users']}</b>
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: <b>{stats['blocked_users']}</b>

üîÑ <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: <b>{stats['active_sessions']}</b>

üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu")]
            ])
            
            await query.edit_message_text(stats_text, parse_mode='HTML', reply_markup=keyboard)
        finally:
            db.close()
    
    async def show_active_sessions(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
        sessions_text = """
üîÑ <b>–ê–ö–¢–ò–í–ù–´–ï –°–ï–°–°–ò–ò</b>

üìä –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
üîß –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏—è—Ö

<i>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –ë–∞–∑–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</i>
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu")]
        ])
        
        await query.edit_message_text(sessions_text, parse_mode='HTML', reply_markup=keyboard)
    
    async def show_admin_settings(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞"""
        settings_text = f"""
‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –î–û–°–¢–£–ü–ê</b>

üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b>
‚Ä¢ Username: @{self.ADMIN_USERNAME}
‚Ä¢ ID: <code>{self.ADMIN_TELEGRAM_ID}</code>

üåê <b>–†–µ–∂–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> –û—Ç–∫—Ä—ã—Ç—ã–π
üìù <b>–õ—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É</b>
‚úÖ <b>–ó–∞—è–≤–∫–∏ —Ç—Ä–µ–±—É—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üîê <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö
‚Ä¢ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu")]
        ])
        
        await query.edit_message_text(settings_text, parse_mode='HTML', reply_markup=keyboard)
    
    async def show_monitoring(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        monitoring_text = f"""
üìà <b>–ú–û–ù–ò–¢–û–†–ò–ù–ì –°–ò–°–¢–ï–ú–´</b>

üü¢ <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:</b>
‚Ä¢ API Server: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ Telegram Bot: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç  
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞
‚Ä¢ WebApp: ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω

‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>
‚Ä¢ –ó–∞–ø—É—â–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: –°—Ç–∞–±–∏–ª—å–Ω–æ

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –í–∫–ª—é—á–µ–Ω—ã
üìä <b>–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:</b> –ê–∫—Ç–∏–≤–Ω–æ
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_monitoring")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu")]
        ])
        
        await query.edit_message_text(monitoring_text, parse_mode='HTML', reply_markup=keyboard)
    
    async def show_generate_links(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Å—ã–ª–æ–∫"""
        links_text = """
üîó <b>–ì–ï–ù–ï–†–ê–¶–ò–Ø –°–°–´–õ–û–ö</b>

‚úÖ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–æ—Å—Ç—É–ø–∞

üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: 2 —á–∞—Å–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
‚Ä¢ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: 8 —á–∞—Å–æ–≤ (–∞–¥–º–∏–Ω)
‚Ä¢ –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ

üí° <b>–°–æ–≤–µ—Ç:</b> –°—Å—ã–ª–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_menu")]
        ])
        
        await query.edit_message_text(links_text, parse_mode='HTML', reply_markup=keyboard)

    async def send_message_with_parse(self, chat_id: int, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π"""
        try:
            await self.app.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"Error sending message: {e}")
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π event loop"""
        print(f"ü§ñ Telegram Bot starting...")
        print(f"üëë Admin: @{self.ADMIN_USERNAME}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop
            try:
                loop = asyncio.get_event_loop()
                if loop.is_running():
                    # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                    import threading
                    def run_in_thread():
                        new_loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(new_loop)
                        new_loop.run_until_complete(self._start_polling())
                    
                    thread = threading.Thread(target=run_in_thread, daemon=True)
                    thread.start()
                    return
            except RuntimeError:
                # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                pass
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–º event loop
            loop.run_until_complete(self._start_polling())
            
        except Exception as e:
            print(f"‚ùå Telegram Bot error: {e}")
            
    async def _start_polling(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ polling —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º webhook –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            await self.app.bot.delete_webhook(drop_pending_updates=True)
            print("üßπ Webhook cleared")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.app.initialize()
            print("üîß Application initialized")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.app.start()
            print("üöÄ Application started")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ updater —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if self.app.updater is not None:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ polling —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                await self.app.updater.start_polling(
                    poll_interval=3.0,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    timeout=20,         # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
                    bootstrap_retries=3, # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                    read_timeout=15,
                    write_timeout=15,
                    connect_timeout=15,
                    pool_timeout=15,
                    drop_pending_updates=True  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                )
                
                print("‚úÖ Telegram Bot started successfully")
                
                # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
                stop_event = asyncio.Event()
                await stop_event.wait()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
            else:
                print("‚ùå Updater is None, cannot start polling")
            
        except Exception as e:
            print(f"‚ùå Telegram Bot polling error: {e}")
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(10)
        finally:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            try:
                if hasattr(self.app, 'updater') and self.app.updater is not None:
                    await self.app.updater.stop()
                if hasattr(self.app, 'stop'):
                    await self.app.stop()
                if hasattr(self.app, 'shutdown'):
                    await self.app.shutdown()
            except Exception as cleanup_error:
                print(f"‚ùå Cleanup error: {cleanup_error}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if bot_token:
        bot = EnhancedTelegramBot(bot_token)
        bot.start_bot()
    else:
        print("‚ùå TELEGRAM_BOT_TOKEN not found in environment variables")
