"""
–°–µ—Ä–≤–∏—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ v2.0
"""

import hashlib
import hmac
import time
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from collections import defaultdict, deque

from .auth_models import AuthAttempt, AuthMethod, TelegramAuthData
from .exceptions import RateLimitError, SecurityError


class SecurityService:
    """–°–µ—Ä–≤–∏—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self):
        # Rate limiting (–≤ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
        self._rate_limits = defaultdict(deque)
        self._failed_attempts = defaultdict(int)
        self._lockout_until: Dict[str, datetime] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting
        self.max_attempts_per_minute = 5
        self.max_attempts_per_hour = 20
        self.lockout_duration_minutes = 15
        self.max_failed_attempts = 5
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        self.telegram_auth_timeout = 86400  # 24 —á–∞—Å–∞
        
    def _get_rate_limit_key(self, identifier: str, action: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –¥–ª—è rate limiting"""
        return f"rate_limit:{action}:{identifier}"
    
    def _cleanup_old_attempts(self, attempts_queue: deque, window_seconds: int):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        cutoff_time = datetime.utcnow() - timedelta(seconds=window_seconds)
        while attempts_queue and attempts_queue[0] < cutoff_time:
            attempts_queue.popleft()
    
    async def check_rate_limit(self, identifier: str, action: str = "auth") -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limit –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞"""
        now = datetime.utcnow()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        lockout_key = f"lockout:{identifier}"
        if lockout_key in self._lockout_until:
            if now < self._lockout_until[lockout_key]:
                raise RateLimitError(
                    f"–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {self._lockout_until[lockout_key]}",
                    retry_after=int((self._lockout_until[lockout_key] - now).total_seconds())
                )
            else:
                # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                del self._lockout_until[lockout_key]
                self._failed_attempts[identifier] = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        minute_key = self._get_rate_limit_key(identifier, f"{action}_minute")
        hour_key = self._get_rate_limit_key(identifier, f"{action}_hour")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        self._cleanup_old_attempts(self._rate_limits[minute_key], 60)
        self._cleanup_old_attempts(self._rate_limits[hour_key], 3600)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if len(self._rate_limits[minute_key]) >= self.max_attempts_per_minute:
            raise RateLimitError("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤ –º–∏–Ω—É—Ç—É", retry_after=60)
        
        if len(self._rate_limits[hour_key]) >= self.max_attempts_per_hour:
            raise RateLimitError("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤ —á–∞—Å", retry_after=3600)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–ø—ã—Ç–∫—É
        self._rate_limits[minute_key].append(now)
        self._rate_limits[hour_key].append(now)
        
        return True
    
    async def log_auth_attempt(self, attempt: AuthAttempt) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        identifier = attempt.ip_address or str(attempt.telegram_id) or "unknown"
        
        if not attempt.success:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            self._failed_attempts[identifier] += 1
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
            if self._failed_attempts[identifier] >= self.max_failed_attempts:
                lockout_until = datetime.utcnow() + timedelta(minutes=self.lockout_duration_minutes)
                self._lockout_until[f"lockout:{identifier}"] = lockout_until
                
                print(f"üö® –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø –¥–ª—è {identifier} –¥–æ {lockout_until} "
                      f"(–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {self._failed_attempts[identifier]})")
        else:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
            if identifier in self._failed_attempts:
                del self._failed_attempts[identifier]
            if f"lockout:{identifier}" in self._lockout_until:
                del self._lockout_until[f"lockout:{identifier}"]
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É (–≤ production –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ –ë–î)
        status = "‚úÖ SUCCESS" if attempt.success else "‚ùå FAILED"
        print(f"üîê AUTH ATTEMPT: {status} | Method: {attempt.method.value} "
              f"| User: {attempt.user_id} | IP: {attempt.ip_address} "
              f"| Time: {attempt.timestamp}")
        
        if attempt.error_message:
            print(f"   Error: {attempt.error_message}")
    
    async def detect_suspicious_activity(self, user_id: int, ip_address: Optional[str] = None) -> bool:
        """–î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        # –í production –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
        
        if ip_address:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å —ç—Ç–æ–≥–æ IP
            failed_count = self._failed_attempts.get(ip_address, 0)
            if failed_count > self.max_failed_attempts // 2:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_key = f"user:{user_id}"
        if user_key in self._failed_attempts:
            if self._failed_attempts[user_key] > 3:
                return True
        
        return False
    
    async def validate_telegram_data(self, auth_data: TelegramAuthData, bot_token: str) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç Telegram"""
        try:
            if not bot_token:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
            current_time = int(time.time())
            if current_time - auth_data.auth_date > self.telegram_auth_timeout:
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
            check_string_parts = [
                f"auth_date={auth_data.auth_date}",
                f"first_name={auth_data.first_name}",
                f"id={auth_data.id}",
            ]
            
            if auth_data.last_name:
                check_string_parts.append(f"last_name={auth_data.last_name}")
            if auth_data.username:
                check_string_parts.append(f"username={auth_data.username}")
            if auth_data.photo_url:
                check_string_parts.append(f"photo_url={auth_data.photo_url}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
            check_string_parts.sort()
            check_string = "\n".join(check_string_parts)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
            secret_key = hashlib.sha256(bot_token.encode()).digest()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ö–µ—à
            calculated_hash = hmac.new(
                secret_key,
                check_string.encode(),
                hashlib.sha256
            ).hexdigest()
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ö–µ—à–µ–º
            return hmac.compare_digest(calculated_hash, auth_data.hash)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    async def generate_secure_session_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏"""
        import secrets
        return secrets.token_urlsafe(32)
    
    async def generate_secure_password(self, length: int = 12) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å"""
        import secrets
        import string
        
        characters = string.ascii_letters + string.digits + "!@#$%^&*"
        return ''.join(secrets.choice(characters) for _ in range(length))
    
    async def hash_password(self, password: str) -> str:
        """–•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å —Å —Å–æ–ª—å—é"""
        import bcrypt
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–ª—å –∏ —Ö–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        salt = bcrypt.gensalt()
        hashed = bcrypt.hashpw(password.encode('utf-8'), salt)
        return hashed.decode('utf-8')
    
    async def verify_password(self, password: str, hashed_password: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –ø—Ä–æ—Ç–∏–≤ —Ö–µ—à–∞"""
        import bcrypt
        
        try:
            return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))
        except Exception:
            return False
    
    async def get_security_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        now = datetime.utcnow()
        active_lockouts = sum(
            1 for lockout_time in self._lockout_until.values()
            if lockout_time > now
        )
        
        return {
            "active_lockouts": active_lockouts,
            "total_failed_attempts": sum(self._failed_attempts.values()),
            "unique_blocked_ips": len(self._failed_attempts),
            "rate_limit_violations": len(self._rate_limits)
        }
    
    async def cleanup_expired_data(self):
        """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        now = datetime.utcnow()
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        expired_lockouts = [
            key for key, lockout_time in self._lockout_until.items()
            if lockout_time <= now
        ]
        for key in expired_lockouts:
            del self._lockout_until[key]
            # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            identifier = key.replace("lockout:", "")
            if identifier in self._failed_attempts:
                del self._failed_attempts[identifier]
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ rate limit –∑–∞–ø–∏—Å–∏
        for key, attempts_queue in list(self._rate_limits.items()):
            if "minute" in key:
                self._cleanup_old_attempts(attempts_queue, 60)
            elif "hour" in key:
                self._cleanup_old_attempts(attempts_queue, 3600)
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –æ—á–µ—Ä–µ–¥–∏
            if not attempts_queue:
                del self._rate_limits[key]
