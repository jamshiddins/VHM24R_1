"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ PostgreSQL –∏ Redis –Ω–∞ Railway
"""
import os
import asyncio
import traceback
from datetime import datetime
from typing import Dict, Any

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è
import redis
import redis.asyncio as async_redis
import psycopg2
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class RailwayConnectionTester:
    """–¢–µ—Å—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ Railway —Å–µ—Ä–≤–∏—Å–∞–º"""
    
    def __init__(self):
        self.results = {
            'postgresql': {'status': 'not_tested', 'details': {}},
            'redis': {'status': 'not_tested', 'details': {}},
            'jwt_service': {'status': 'not_tested', 'details': {}},
            'cache_service': {'status': 'not_tested', 'details': {}}
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.database_url = os.getenv('DATABASE_URL')
        self.redis_url = os.getenv('REDIS_URL', 'redis://localhost:6379')
        self.jwt_secret = os.getenv('JWT_SECRET_KEY')
        
        logger.info("=== –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò RAILWAY ===")
        logger.info(f"DATABASE_URL: {'‚úì —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' if self.database_url else '‚úó –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}")
        logger.info(f"REDIS_URL: {self.redis_url}")
        logger.info(f"JWT_SECRET_KEY: {'‚úì —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' if self.jwt_secret else '‚úó –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}")
        print()

    def test_postgresql_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        if not self.database_url:
            return {
                'status': 'failed',
                'error': 'DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
                'recommendation': '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DATABASE_URL –æ—Ç Railway PostgreSQL —Å–µ—Ä–≤–∏—Å–∞'
            }
        
        if self.database_url.startswith('sqlite'):
            return {
                'status': 'warning',
                'error': '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –≤–º–µ—Å—Ç–æ PostgreSQL',
                'current_db': self.database_url,
                'recommendation': '–ó–∞–º–µ–Ω–∏—Ç–µ DATABASE_URL –Ω–∞ PostgreSQL URL –æ—Ç Railway'
            }
        
        try:
            # –¢–µ—Å—Ç —Å psycopg2
            logger.info("  üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            conn = psycopg2.connect(self.database_url)
            cursor = conn.cursor()
            cursor.execute("SELECT version();")
            version_result = cursor.fetchone()
            version = version_result[0] if version_result else "Unknown"
            cursor.close()
            conn.close()
            
            # –¢–µ—Å—Ç —Å SQLAlchemy
            logger.info("  üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQLAlchemy...")
            engine = create_engine(self.database_url)
            SessionLocal = sessionmaker(bind=engine)
            
            with SessionLocal() as session:
                result = session.execute(text("SELECT current_database(), current_user;"))
                db_info = result.fetchone()
                database_name = db_info[0] if db_info else "Unknown"
                user_name = db_info[1] if db_info else "Unknown"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            logger.info("  üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...")
            with SessionLocal() as session:
                tables_result = session.execute(text("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public'
                """))
                tables = [row[0] for row in tables_result.fetchall()]
            
            return {
                'status': 'success',
                'version': version,
                'database': database_name,
                'user': user_name,
                'tables': tables,
                'tables_count': len(tables),
                'connection_test': 'successful'
            }
            
        except Exception as e:
            return {
                'status': 'failed',
                'error': str(e),
                'traceback': traceback.format_exc(),
                'recommendation': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PostgreSQL –Ω–∞ Railway'
            }

    def test_redis_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        try:
            # –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ Redis
            logger.info("  üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ Redis...")
            sync_client = redis.from_url(self.redis_url, decode_responses=True)
            
            if sync_client is None:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Redis –∫–ª–∏–µ–Ω—Ç")
            
            sync_client.ping()
            
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
            test_key = f"railway_test_{datetime.now().timestamp()}"
            sync_client.set(test_key, "test_value", ex=60)
            retrieved_value = sync_client.get(test_key)
            sync_client.delete(test_key)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Redis
            info = sync_client.info()
            memory_info = sync_client.info('memory')
            
            sync_client.close()
            
            return {
                'status': 'success',
                'redis_version': info.get('redis_version'),
                'connected_clients': info.get('connected_clients'),
                'used_memory_human': memory_info.get('used_memory_human'),
                'keyspace': info.get('db0', {}),
                'test_write_read': 'successful' if retrieved_value == "test_value" else 'failed',
                'connection_test': 'successful'
            }
            
        except Exception as e:
            return {
                'status': 'failed',
                'error': str(e),
                'traceback': traceback.format_exc(),
                'recommendation': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ REDIS_URL –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis –Ω–∞ Railway'
            }

    async def test_async_redis_connection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        try:
            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Redis –∫–ª–∏–µ–Ω—Ç
            logger.info("  üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ Redis...")
            async_client = async_redis.from_url(
                self.redis_url, 
                encoding="utf-8", 
                decode_responses=True
            )
            
            await async_client.ping()
            
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
            test_key = f"async_railway_test_{datetime.now().timestamp()}"
            await async_client.set(test_key, "async_test_value", ex=60)
            retrieved_value = await async_client.get(test_key)
            await async_client.delete(test_key)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            info = await async_client.info()
            await async_client.close()
            
            return {
                'status': 'success',
                'async_test': 'successful',
                'test_write_read': 'successful' if retrieved_value == "async_test_value" else 'failed',
                'server_info': {
                    'version': info.get('redis_version'),
                    'uptime': info.get('uptime_in_seconds')
                }
            }
            
        except Exception as e:
            return {
                'status': 'failed',
                'error': str(e),
                'traceback': traceback.format_exc()
            }

    def test_jwt_service_integration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ JWT —Å–µ—Ä–≤–∏—Å–∞ —Å Redis"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Å–µ—Ä–≤–∏—Å–∞...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º JWT —Å–µ—Ä–≤–∏—Å
            from app.services.secure_jwt_service import secure_jwt_service, TokenType
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –≤ JWT —Å–µ—Ä–≤–∏—Å–µ
            jwt_redis_status = {
                'redis_client_exists': 'true' if secure_jwt_service.redis_client is not None else 'false',
                'blacklist_service_exists': 'true' if secure_jwt_service.blacklist is not None else 'false',
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            if self.jwt_secret:
                try:
                    test_token = secure_jwt_service.create_token(
                        user_id=999,
                        username="test_user",
                        roles=["user"],
                        permissions=["read"],
                        token_type=TokenType.ACCESS
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
                    payload = secure_jwt_service.verify_token(test_token, TokenType.ACCESS)
                    
                    jwt_redis_status.update({
                        'token_creation': 'successful',
                        'token_verification': 'successful',
                        'user_id_match': 'successful' if str(payload.get('sub')) == '999' else 'failed'
                    })
                    
                except Exception as token_error:
                    jwt_redis_status.update({
                        'token_creation': 'failed',
                        'token_error': str(token_error)
                    })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º blacklist —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            try:
                test_jti = "test_jti_123"
                secure_jwt_service.blacklist.add_token(test_jti, 9999999999, "test")
                is_blacklisted = secure_jwt_service.blacklist.is_blacklisted(test_jti)
                blacklist_info = secure_jwt_service.blacklist.get_blacklist_info(test_jti)
                
                jwt_redis_status.update({
                    'blacklist_add': 'successful',
                    'blacklist_check': 'successful' if is_blacklisted else 'failed',
                    'blacklist_info': 'successful' if blacklist_info else 'failed'
                })
                
            except Exception as blacklist_error:
                jwt_redis_status.update({
                    'blacklist_error': str(blacklist_error)
                })
            
            return {
                'status': 'success' if jwt_redis_status.get('redis_client_exists') else 'warning',
                **jwt_redis_status
            }
            
        except Exception as e:
            return {
                'status': 'failed',
                'error': str(e),
                'traceback': traceback.format_exc()
            }

    async def test_cache_service_integration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫—ç—à —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à —Å–µ—Ä–≤–∏—Å–∞...")
        
        try:
            from app.services.cache_service import cache_service
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫—ç—à—É
            await cache_service.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            cache_status = {
                'redis_connected': 'true' if cache_service.connected else 'false',
                'redis_client_exists': 'true' if cache_service.redis_client is not None else 'false',
                'memory_cache_exists': 'true' if cache_service.memory_cache is not None else 'false'
            }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞
            test_key = f"cache_test_{datetime.now().timestamp()}"
            test_value = {"test": "data", "timestamp": datetime.now().isoformat()}
            
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –∏ —á—Ç–µ–Ω–∏—è
            await cache_service.set(test_key, test_value, expire=300)
            retrieved_value = await cache_service.get(test_key)
            
            cache_status.update({
                'write_test': 'successful',
                'read_test': 'successful' if retrieved_value == test_value else 'failed',
                'retrieved_data_match': 'successful' if retrieved_value == test_value else 'failed'
            })
            
            # –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è
            await cache_service.delete(test_key)
            deleted_check = await cache_service.get(test_key)
            
            cache_status.update({
                'delete_test': 'successful' if deleted_check is None else 'failed'
            })
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await cache_service.get_stats()
            health = await cache_service.health_check()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            stats_str = str(stats) if stats else 'unavailable'
            health_str = str(health) if health else 'unavailable'
            
            cache_status.update({
                'statistics': stats_str,
                'health_check': health_str
            })
            
            await cache_service.disconnect()
            
            return {
                'status': 'success',
                **cache_status
            }
            
        except Exception as e:
            return {
                'status': 'failed',
                'error': str(e),
                'traceback': traceback.format_exc()
            }

    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Railway –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        print()
        
        # PostgreSQL —Ç–µ—Å—Ç
        self.results['postgresql'] = self.test_postgresql_connection()
        logger.info(f"PostgreSQL: {self.results['postgresql']['status']}")
        
        # Redis —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        self.results['redis'] = self.test_redis_connection()
        logger.info(f"Redis (sync): {self.results['redis']['status']}")
        
        # Redis –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        async_redis_result = await self.test_async_redis_connection()
        self.results['redis']['async_test'] = async_redis_result
        logger.info(f"Redis (async): {async_redis_result['status']}")
        
        # JWT —Å–µ—Ä–≤–∏—Å —Ç–µ—Å—Ç
        self.results['jwt_service'] = self.test_jwt_service_integration()
        logger.info(f"JWT Service: {self.results['jwt_service']['status']}")
        
        # Cache —Å–µ—Ä–≤–∏—Å —Ç–µ—Å—Ç
        self.results['cache_service'] = await self.test_cache_service_integration()
        logger.info(f"Cache Service: {self.results['cache_service']['status']}")
        
        return self.results

    def print_detailed_report(self):
        """–ü–µ—á–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*80)
        print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø RAILWAY –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô")
        print("="*80)
        
        for service, result in self.results.items():
            print(f"\nüìä {service.upper()}")
            print("-" * 50)
            
            status = result.get('status', 'unknown')
            status_icon = {
                'success': '‚úÖ',
                'warning': '‚ö†Ô∏è', 
                'failed': '‚ùå',
                'not_tested': '‚è∏Ô∏è'
            }.get(status, '‚ùì')
            
            print(f"–°—Ç–∞—Ç—É—Å: {status_icon} {status}")
            
            if status == 'success':
                if service == 'postgresql':
                    print(f"  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {result.get('database', 'N/A')}")
                    print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result.get('user', 'N/A')}")
                    print(f"  –¢–∞–±–ª–∏—Ü: {result.get('tables_count', 0)}")
                    if result.get('tables'):
                        print(f"  –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(result['tables'][:5])}")
                
                elif service == 'redis':
                    print(f"  –í–µ—Ä—Å–∏—è Redis: {result.get('redis_version', 'N/A')}")
                    print(f"  –ü–∞–º—è—Ç—å: {result.get('used_memory_human', 'N/A')}")
                    print(f"  –ö–ª–∏–µ–Ω—Ç—ã: {result.get('connected_clients', 'N/A')}")
                
                elif service == 'jwt_service':
                    print(f"  Redis –∫–ª–∏–µ–Ω—Ç: {'‚úÖ' if result.get('redis_client_exists') else '‚ùå'}")
                    print(f"  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: {result.get('token_creation', 'N/A')}")
                    print(f"  Blacklist: {result.get('blacklist_check', 'N/A')}")
                
                elif service == 'cache_service':
                    print(f"  Redis –ø–æ–¥–∫–ª—é—á–µ–Ω: {'‚úÖ' if result.get('redis_connected') else '‚ùå'}")
                    stats = result.get('statistics', {})
                    if stats:
                        print(f"  Hit rate: {stats.get('hit_rate_percent', 0)}%")
                        print(f"  –û–ø–µ—Ä–∞—Ü–∏–π: {stats.get('total_operations', 0)}")
            
            elif status in ['failed', 'warning']:
                error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {error}")
                
                recommendation = result.get('recommendation')
                if recommendation:
                    print(f"  üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")
        
        print("\n" + "="*80)
        self.print_recommendations()

    def print_recommendations(self):
        """–ü–µ—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ù–ê–°–¢–†–û–ô–ö–ò RAILWAY")
        print("="*80)
        
        recommendations = []
        
        # PostgreSQL —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.results['postgresql']['status'] != 'success':
            if not self.database_url:
                recommendations.append(
                    "üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DATABASE_URL –æ—Ç Railway PostgreSQL —Å–µ—Ä–≤–∏—Å–∞:\n"
                    "   railway variables set DATABASE_URL=postgresql://user:pass@host:port/db"
                )
            elif self.database_url.startswith('sqlite'):
                recommendations.append(
                    "üîß –ó–∞–º–µ–Ω–∏—Ç–µ SQLite –Ω–∞ PostgreSQL –æ—Ç Railway:\n"
                    "   –ü–æ–ª—É—á–∏—Ç–µ DATABASE_URL –∏–∑ Railway Dashboard ‚Üí PostgreSQL —Å–µ—Ä–≤–∏—Å–∞"
                )
        
        # Redis —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.results['redis']['status'] != 'success':
            recommendations.append(
                "üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Redis –Ω–∞ Railway:\n"
                "   1. –î–æ–±–∞–≤—å—Ç–µ Redis —Å–µ—Ä–≤–∏—Å –≤ Railway\n"
                "   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ REDIS_URL: railway variables set REDIS_URL=redis://..."
            )
        
        # JWT —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if not self.jwt_secret:
            recommendations.append(
                "üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ JWT_SECRET_KEY:\n"
                "   railway variables set JWT_SECRET_KEY='your-very-secure-secret-key-32+chars'"
            )
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.results['postgresql']['status'] == 'success' and self.results['redis']['status'] == 'success':
            recommendations.append(
                "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n"
                "   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π\n"
                "   - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL\n"
                "   - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Redis"
            )
        
        for i, rec in enumerate(recommendations, 1):
            print(f"\n{i}. {rec}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = RailwayConnectionTester()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    results = await tester.run_all_tests()
    
    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    tester.print_detailed_report()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    overall_status = 'success'
    for service, result in results.items():
        if result['status'] == 'failed':
            overall_status = 'failed'
            break
        elif result['status'] == 'warning' and overall_status == 'success':
            overall_status = 'warning'
    
    print(f"\nüéØ –û–ë–©–ò–ô –°–¢–ê–¢–£–°: {overall_status.upper()}")
    
    return results, overall_status

if __name__ == "__main__":
    asyncio.run(main())
