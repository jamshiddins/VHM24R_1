"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ –¥–µ–ø–ª–æ—é
"""
import os
import sys
import subprocess
import importlib.util

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = [
        'DATABASE_URL',
        'TELEGRAM_BOT_TOKEN', 
        'SECRET_KEY'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    os.environ['DATABASE_URL'] = 'postgresql://test'
    os.environ['TELEGRAM_BOT_TOKEN'] = 'test_token'
    os.environ['SECRET_KEY'] = 'test_key'
    
    try:
        from app.main import app
        print("‚úÖ FastAPI app –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        return False

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements.txt...")
    
    try:
        with open('requirements.txt', 'r') as f:
            requirements = f.read()
        
        critical_packages = [
            'fastapi',
            'uvicorn',
            'sqlalchemy',
            'alembic',
            'python-telegram-bot',
            'jinja2==3.1.2'
        ]
        
        missing_packages = []
        for package in critical_packages:
            if package not in requirements:
                missing_packages.append(package)
        
        if missing_packages:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
            return False
        else:
            print("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return True
            
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_security():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –Ω–µ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω—ã
    security_issues = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    files_to_check = [
        'app/main.py',
        'app/telegram_bot.py',
        'app/api/auth.py'
    ]
    
    for file_path in files_to_check:
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ò—â–µ–º –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
            if '8475088876:AAGCh21e0ohqPkX4M6Efe_Pra4pzQEznWmk' in content:
                security_issues.append(f"–ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ {file_path}")
    
    if security_issues:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        for issue in security_issues:
            print(f"  - {issue}")
        return False
    else:
        print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return True

def check_database_models():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from app.models import User, Order, UploadedFile
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return False

def check_api_endpoints():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    try:
        from app.api import auth, files, orders, analytics
        print("‚úÖ API –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ API: {e}")
        return False

def check_telegram_bot():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞...")
    
    try:
        import app.telegram_bot
        print("‚úÖ Telegram –±–æ—Ç –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Telegram –±–æ—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
        return False

def check_templates():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤...")
    
    template_files = [
        'templates/webapp.html'
    ]
    
    missing_templates = []
    for template in template_files:
        if not os.path.exists(template):
            missing_templates.append(template)
    
    if missing_templates:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —à–∞–±–ª–æ–Ω—ã: {', '.join(missing_templates)}")
        return False
    else:
        print("‚úÖ –í—Å–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True

def check_frontend():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ frontend —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend...")
    
    frontend_files = [
        '../frontend/index.html',
        '../frontend/src/main.js',
        '../frontend/src/App.vue'
    ]
    
    missing_files = []
    for file_path in frontend_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç frontend —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    else:
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ frontend —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ –ö –î–ï–ü–õ–û–Æ")
    print("=" * 60)
    
    checks = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment_variables),
        ("–ò–º–ø–æ—Ä—Ç—ã", check_imports),
        ("Requirements", check_requirements),
        ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", check_security),
        ("–ú–æ–¥–µ–ª–∏ –ë–î", check_database_models),
        ("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", check_api_endpoints),
        ("Telegram –±–æ—Ç", check_telegram_bot),
        ("–®–∞–±–ª–æ–Ω—ã", check_templates),
        ("Frontend", check_frontend)
    ]
    
    passed = 0
    total = len(checks)
    
    for name, check_func in checks:
        try:
            if check_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {name}: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –î–ï–ü–õ–û–Æ!")
        return True
    else:
        print("‚ö†Ô∏è  –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –î–ï–ü–õ–û–Æ")
        print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
