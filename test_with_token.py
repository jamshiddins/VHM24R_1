#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π JWT —Ç–æ–∫–µ–Ω–∞
"""

import requests
import json
import os
import sys
from pathlib import Path
import jwt
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE = "http://localhost:8000"
SECRET_KEY = "test-secret-key-for-development-only-change-in-production"

def generate_test_jwt_token():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω"""
    payload = {
        'user_id': 1,
        'telegram_id': 123456789,
        'username': 'test_user',
        'role': 'user',
        'exp': datetime.utcnow() + timedelta(hours=24),
        'iat': datetime.utcnow()
    }
    
    token = jwt.encode(payload, SECRET_KEY, algorithm='HS256')
    return token

def create_test_csv():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª"""
    test_data = """order_number,machine_code,goods_name,order_price,payment_status
ORD001,VM001,Coffee,5000,paid
ORD002,VM002,Tea,3000,paid
ORD003,VM001,Juice,4000,pending
"""
    
    with open("test_orders.csv", "w", encoding="utf-8") as f:
        f.write(test_data)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª test_orders.csv")

def test_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    try:
        response = requests.get(f"{API_BASE}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check: {data['status']}")
            print(f"   Database: {data['services'].get('database', 'unknown')}")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
        return False

def test_file_upload_with_token(token):
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å JWT —Ç–æ–∫–µ–Ω–æ–º"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.exists("test_orders.csv"):
            create_test_csv()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        files = {
            'files': ('test_orders.csv', open('test_orders.csv', 'rb'), 'text/csv')
        }
        
        headers = {
            'Authorization': f'Bearer {token}'
        }
        
        print("üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å JWT —Ç–æ–∫–µ–Ω–æ–º...")
        response = requests.post(
            f"{API_BASE}/api/v1/files/upload",
            files=files,
            headers=headers
        )
        
        files['files'][1].close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            print(f"   Session ID: {data.get('session_id')}")
            print(f"   Files processed: {len(data.get('files', []))}")
            
            for file_info in data.get('files', []):
                if 'error' in file_info:
                    print(f"   ‚ùå {file_info['filename']}: {file_info['error']}")
                else:
                    print(f"   ‚úÖ {file_info['filename']}: {file_info['size']} bytes")
            
            return data.get('session_id')
        else:
            print(f"‚ùå Upload failed: {response.status_code}")
            print(f"   Response: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Upload error: {e}")
        return None

def test_swagger_ui():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Swagger UI"""
    try:
        response = requests.get(f"{API_BASE}/docs")
        if response.status_code == 200:
            print("‚úÖ Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω: http://localhost:8000/docs")
            return True
        else:
            print(f"‚ùå Swagger UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Swagger UI error: {e}")
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    token = generate_test_jwt_token()
    headers = {'Authorization': f'Bearer {token}'}
    
    endpoints = [
        ('/api/v1/files/', 'GET', 'Files list'),
        ('/api/v1/orders?page=1&page_size=5', 'GET', 'Orders list'),
        ('/api/v1/analytics/summary', 'GET', 'Analytics summary')
    ]
    
    for endpoint, method, description in endpoints:
        try:
            if method == 'GET':
                response = requests.get(f"{API_BASE}{endpoint}", headers=headers)
            
            if response.status_code == 200:
                print(f"‚úÖ {description}: OK")
            else:
                print(f"‚ùå {description}: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {description}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VHM24R —Å–∏—Å—Ç–µ–º—ã —Å JWT —Ç–æ–∫–µ–Ω–æ–º")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API...")
    if not test_health_check():
        print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Swagger UI
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Swagger UI...")
    test_swagger_ui()
    
    # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
    print("\n3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞...")
    token = generate_test_jwt_token()
    print(f"üîë JWT —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {token[:50]}...")
    
    # 4. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...")
    session_id = test_file_upload_with_token(token)
    
    if session_id:
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, session_id: {session_id}")
    else:
        print("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
    
    # 5. –¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    test_api_endpoints()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üåê Swagger UI: http://localhost:8000/docs")
    print("üìä Health Check: http://localhost:8000/health")
    
    # –û—á–∏—Å—Ç–∫–∞
    if os.path.exists("test_orders.csv"):
        os.remove("test_orders.csv")
        print("üßπ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")

if __name__ == "__main__":
    main()
