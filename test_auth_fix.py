#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏–∫–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram
"""

import os
import sys
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append('.')

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from app.main import app
        print("‚úÖ FastAPI app imports successfully")
    except Exception as e:
        print(f"‚ùå FastAPI import error: {e}")
        return False
    
    try:
        from app.telegram_bot import EnhancedTelegramBot
        print("‚úÖ Telegram bot imports successfully")
    except Exception as e:
        print(f"‚ùå Telegram bot import error: {e}")
    
    try:
        from app.services.simple_dynamic_auth import SimpleDynamicAuth
        auth = SimpleDynamicAuth()
        print("‚úÖ SimpleDynamicAuth imports successfully")
    except Exception as e:
        print(f"‚ùå SimpleDynamicAuth import error: {e}")
        return False
    
    try:
        from app.telegram_auth import TelegramAuth
        telegram_auth = TelegramAuth()
        print("‚úÖ TelegramAuth imports successfully")
    except Exception as e:
        print(f"‚ùå TelegramAuth import error: {e}")
        return False
    
    return True

def test_auth_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    try:
        from fastapi.testclient import TestClient
        from app.main import app
        
        client = TestClient(app)
        
        # –¢–µ—Å—Ç health endpoint
        response = client.get("/health")
        if response.status_code == 200:
            print("‚úÖ /health endpoint works")
        else:
            print(f"‚ùå /health endpoint failed: {response.status_code}")
        
        # –¢–µ—Å—Ç webapp endpoint
        response = client.get("/webapp")
        if response.status_code == 200:
            print("‚úÖ /webapp endpoint works")
        else:
            print(f"‚ùå /webapp endpoint failed: {response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Endpoint test error: {e}")
        return False

async def test_auth_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SimpleDynamicAuth...")
    
    try:
        from app.services.simple_dynamic_auth import SimpleDynamicAuth
        from app.database import get_db
        
        auth = SimpleDynamicAuth()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î)
        print("‚úÖ SimpleDynamicAuth service initialized")
        print(f"‚úÖ Session lifetime: {auth.session_lifetime}")
        print(f"‚úÖ Admin session lifetime: {auth.admin_session_lifetime}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Auth service test error: {e}")
        return False

def test_webapp_template():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω WebApp"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebApp —à–∞–±–ª–æ–Ω–∞...")
    
    try:
        from pathlib import Path
        
        template_path = Path("templates/webapp.html")
        if template_path.exists():
            content = template_path.read_text(encoding='utf-8')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if "token=${data.access_token}" in content:
                print("‚úÖ Token passing fix found in template")
            else:
                print("‚ùå Token passing fix NOT found in template")
                return False
            
            if "urlParams.get('token')" in content:
                print("‚úÖ URL parameter handling found in template")
            else:
                print("‚ùå URL parameter handling NOT found in template")
                return False
            
            if "localStorage.setItem('auth_token'" in content:
                print("‚úÖ Token storage found in template")
            else:
                print("‚ùå Token storage NOT found in template")
                return False
            
            print("‚úÖ WebApp template contains all required fixes")
            return True
        else:
            print("‚ùå WebApp template not found")
            return False
            
    except Exception as e:
        print(f"‚ùå Template test error: {e}")
        return False

def test_environment():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = [
        "DATABASE_URL",
        "SECRET_KEY",
        "TELEGRAM_BOT_TOKEN"
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ö†Ô∏è  Missing environment variables: {', '.join(missing_vars)}")
        print("   (This is expected in development)")
    else:
        print("‚úÖ All required environment variables are set")
    
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¶–ò–ö–õ–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–≠–Ω–¥–ø–æ–∏–Ω—Ç—ã", test_auth_endpoints),
        ("–°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", lambda: asyncio.run(test_auth_service())),
        ("WebApp —à–∞–±–ª–æ–Ω", test_webapp_template),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: PASSED")
            else:
                print(f"‚ùå {test_name}: FAILED")
        except Exception as e:
            print(f"‚ùå {test_name}: ERROR - {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –¥–µ–ø–ª–æ—é.")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
